{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ben\\\\Desktop\\\\RockPaperScissor(React)\\\\rock-paper-scissors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Ben\\\\Desktop\\\\RockPaperScissor(React)\\\\rock-paper-scissors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Ben\\\\Desktop\\\\RockPaperScissor(React)\\\\rock-paper-scissors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Ben\\\\Desktop\\\\RockPaperScissor(React)\\\\rock-paper-scissors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\RockPaperScissor(React)\\\\rock-paper-scissors\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Player from \"./player\";\nimport \"./styles.css\";\nvar moves = [\"rock\", \"paper\", \"scissors\"];\nvar modes = [\"bestOf3\", \"bestOf5\"];\nvar types = [\"random\", \"tactical\"];\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      player: moves[0],\n      //Keep track of player selection\n      computer: moves[0],\n      //Keep track of computer selection\n      lastChoice: moves[0],\n      //Keep track of computer's last selection\n      mode: modes[0],\n      // Keep track of mode(i.e how many rounds)\n      type: types[0],\n      // keep track of Computer type\n      playerScore: 0,\n      // keep track of Player's Score\n      computerScore: 0,\n      // keep track of Computer's Score\n      round: 3,\n      //default is Best of 3\n      nextBest: \"\",\n      winner: \"\",\n      finalWinner: \"\"\n    };\n\n    _this.startGame = function () {\n      var counter = 0,\n          rounds = 3;\n      var gameInterval = setInterval(function () {\n        // alert(\"Select Computer type and Round to Begin\")\n        if (_this.state.type === \"tactical\") {\n          _this.nextBest = _this.selectNextBestMove(_this.lastChoice);\n\n          _this.playTactical(); //Play tactically\n\n        } else {\n          _this.lastChoice = _this.playRandom(); //Play random for Computer\n        }\n\n        rounds = _this.state.round; // if (counter > 5) {\n        //   clearInterval(gameInterval);\n        //   this.setState({\n        //     winner: this.selectWinner()\n        //   });\n        // }\n\n        while (counter < rounds) {\n          counter++;\n\n          _this.setState({\n            winner: _this.selectWinner()\n          }); //Game Over Winner is   \n\n        }\n\n        clearInterval(gameInterval);\n      }, 100);\n    };\n\n    _this.selectMode = function (mode) {\n      var round = 0;\n\n      if (mode === \"bestOf3\") {\n        round = 3;\n      } else if (mode === \"bestOf5\") {\n        round = 5;\n      } else {\n        return \"Select Mode\";\n      }\n\n      _this.setState({\n        mode: mode,\n        round: round,\n        playerScore: 0,\n        computerScore: 0\n      });\n    };\n\n    _this.selectType = function (type) {\n      if (type === \"tactical\") {\n        type = \"tactical\";\n      } else {\n        type = \"random\";\n      }\n\n      _this.setState({\n        type: type,\n        playerScore: 0,\n        computerScore: 0\n      });\n    };\n\n    _this.selectWinner = function () {\n      var _this$state = _this.state,\n          player = _this$state.player,\n          computer = _this$state.computer;\n\n      if (player === computer) {\n        return \"It's a Draw!\";\n      } else if (player === \"rock\" && computer === \"scissors\" || player === \"scissors\" && computer === \"paper\" || player === \"paper\" && computer === \"rock\") {\n        // this.updatePlayerScore()\n        return \"Player Wins!\";\n      } else {\n        // this.updateComputerScore(1)\n        return \"Computer Wins!\";\n      }\n    };\n\n    _this.displayWinner = function (playerScore, computerScore) {\n      if (playerScore > computerScore) {\n        return \"Player Wins the Game\";\n      } else if (playerScore === computerScore) {\n        return \"This Game has no Winner!\";\n      } else {\n        return \"Computer Wins the Game\";\n      }\n    };\n\n    _this.selectMove = function (move) {\n      _this.setState({\n        player: move,\n        winner: \"\"\n      });\n    };\n\n    _this.playRandom = function () {\n      var move = \"\";\n      move = moves[Math.floor(Math.random() * moves.length)];\n      _this.lastChoice = move;\n      var next = \"\";\n      next = _this.selectNextBestMove(_this.lastChoice);\n      console.log(next);\n\n      _this.setState({\n        computer: move,\n        lastChoice: _this.lastChoice,\n        nextBest: next\n      });\n    };\n\n    _this.playTactical = function () {\n      var _nextBest;\n\n      console.log('playing tactical');\n      var move = \"\",\n          lastChoice = _this.lastChoice,\n          nextBest = _this.nextBest;\n      nextBest = (_nextBest = nextBest) !== null && _nextBest !== void 0 ? _nextBest : _this.selectNextBestMove(_this.lastChoice);\n      move = nextBest; //Play next Best \n\n      lastChoice = move; //update last choice\n\n      nextBest = _this.selectNextBestMove(lastChoice); // update next best\n\n      _this.setState({\n        computer: move,\n        lastChoice: lastChoice,\n        nextBest: nextBest\n      });\n    };\n\n    _this.updatePlayerScore = function () {// this.setState((preState) => {\n      //   return {\n      //     playerScore : preState.playerScore + 1\n      //     };\n      //   this.setState((prevState, props) => ({\n      //     playerScore: prevState.playerScore + 1\n      // })); \n    };\n\n    _this.updateComputerScore = function (step) {\n      var computerScore = _this.state.computerScore;\n\n      _this.setState({\n        computerScore: computerScore\n      });\n    };\n\n    _this.updateNextBest = function (nextBest) {\n      _this.setState({\n        nextBest: nextBest\n      });\n    };\n\n    _this.selectNextBestMove = function (lastChoice) {\n      // const {  lastChoice } = this.state;\n      switch (lastChoice) {\n        case 'rock':\n          _this.updateNextBest(\"paper\");\n\n          return 'paper';\n\n        case 'paper':\n          _this.updateNextBest(\"scissors\");\n\n          return 'scissors';\n\n        case 'scissors':\n          _this.updateNextBest(\"rock\");\n\n          return 'rock';\n\n        default:\n          return moves[Math.floor(Math.random() * moves.length)];\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _this$displayWinner;\n\n      var _this$state2 = this.state,\n          player = _this$state2.player,\n          computer = _this$state2.computer,\n          winner = _this$state2.winner,\n          final = _this$state2.final,\n          playerScore = _this$state2.playerScore,\n          computerScore = _this$state2.computerScore;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, \"Rock Paper Scissors\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }, \"Select Computer type and Round to Begin\"), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"gamesetting\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectType(\"random\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }\n      }, \"Random\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectType(\"tactical\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }, \"Tactical AI\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectMode(\"bestOf3\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }\n      }, \"Best Of 3\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectMode(\"bestOf5\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }\n      }, \"Best Of 5\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Player, {\n        move: player,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Player, {\n        move: computer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectMove(\"rock\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }\n      }, \"rock\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectMove(\"paper\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }\n      }, \"paper\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"moveBtn\",\n        onClick: function onClick() {\n          return _this2.selectMove(\"scissors\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }\n      }, \"scissor\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"winner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }, \" \", winner ? this.selectWinner() : null), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"finalWin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }\n      }, \" \", (_this$displayWinner = this.displayWinner()) !== null && _this$displayWinner !== void 0 ? _this$displayWinner : null), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.startGame,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }\n      }, \"Play!\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/RockPaperScissor(React)/rock-paper-scissors/src/index.js"],"names":["React","Component","ReactDOM","Player","moves","modes","types","App","state","player","computer","lastChoice","mode","type","playerScore","computerScore","round","nextBest","winner","finalWinner","startGame","counter","rounds","gameInterval","setInterval","selectNextBestMove","playTactical","playRandom","setState","selectWinner","clearInterval","selectMode","selectType","displayWinner","selectMove","move","Math","floor","random","length","next","console","log","updatePlayerScore","updateComputerScore","step","updateNextBest","final","textAlign","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Player from \"./player\";\nimport \"./styles.css\";\n\nconst moves = [\"rock\", \"paper\", \"scissors\"];\nconst modes = [\"bestOf3\", \"bestOf5\"];\nconst types = [\"random\", \"tactical\"];\n\nclass App extends Component {\n  state = { \n    player: moves[0], //Keep track of player selection\n    computer: moves[0], //Keep track of computer selection\n    lastChoice: moves[0], //Keep track of computer's last selection\n    mode: modes[0], // Keep track of mode(i.e how many rounds)\n    type: types[0], // keep track of Computer type\n    playerScore: 0, // keep track of Player's Score\n    computerScore: 0, // keep track of Computer's Score\n    round:3, //default is Best of 3\n    nextBest:\"\",\n    winner: \"\",\n    finalWinner: \"\",\n  };\n\n  startGame = () => {\n    let counter = 0, rounds =3\n    let gameInterval = setInterval(() => {\n      // alert(\"Select Computer type and Round to Begin\")\n      if(this.state.type === \"tactical\"){\n        this.nextBest = this.selectNextBestMove(this.lastChoice)\n        this.playTactical() //Play tactically\n      }else{\n        this.lastChoice = this.playRandom() //Play random for Computer\n      }\n      rounds = this.state.round\n      // if (counter > 5) {\n      //   clearInterval(gameInterval);\n      //   this.setState({\n      //     winner: this.selectWinner()\n      //   });\n      // }\n      while (counter < rounds){\n        counter++;\n        this.setState({\n          winner: this.selectWinner()\n        });\n\n      //Game Over Winner is   \n      }\n      clearInterval(gameInterval);\n    }, 100);\n  };\n\n  //selectMode\n  selectMode = mode => {\n    let round = 0;\n    if (mode === \"bestOf3\"){\n      round = 3;\n    }else if(mode === \"bestOf5\"){\n      round = 5;\n    }else{\n      return \"Select Mode\"\n    }\n    this.setState({\n      mode: mode,\n      round: round,\n      playerScore: 0,\n      computerScore: 0\n    });\n  };\n  //select Computer Type\n  selectType = type => {\n    if(type ===\"tactical\"){\n      type = \"tactical\"\n    }else{\n      type = \"random\"\n    }\n    this.setState({\n      type: type,\n      playerScore: 0,\n      computerScore: 0\n      });\n  };\n  selectWinner = () => {\n    const { player, computer,  } = this.state;\n\n    if (player === computer) {\n      return \"It's a Draw!\";\n    } else if (\n      (player === \"rock\" && computer === \"scissors\") ||\n      (player === \"scissors\" && computer === \"paper\") ||\n      (player === \"paper\" && computer === \"rock\")\n    ) {\n      // this.updatePlayerScore()\n      return \"Player Wins!\";\n    } else {\n      // this.updateComputerScore(1)\n      return \"Computer Wins!\";\n    }\n  };\n\n  displayWinner = (playerScore, computerScore) =>{\n    \n    if(playerScore > computerScore){\n      return \"Player Wins the Game\"\n    }else if(playerScore === computerScore){\n      return \"This Game has no Winner!\"\n    }else{\n      return \"Computer Wins the Game\"\n    }\n  }\n  selectMove = move => {\n    this.setState({\n      player: move,\n      winner: \"\"\n    });\n  };\n  //playRandom\n  playRandom = () =>{\n    let move =\"\"\n    move = moves[Math.floor(Math.random() * moves.length)]\n    this.lastChoice = move\n    let next=\"\"\n    next = this.selectNextBestMove(this.lastChoice)\n    console.log(next)\n    this.setState({\n      computer: move,\n      lastChoice: this.lastChoice,\n      nextBest: next\n    });\n  }\n  playTactical = () =>{\n    console.log('playing tactical')\n    let move =\"\",lastChoice=this.lastChoice, nextBest =this.nextBest\n    nextBest = nextBest??this.selectNextBestMove(this.lastChoice)\n    move = nextBest //Play next Best \n    lastChoice = move //update last choice\n    nextBest = this.selectNextBestMove(lastChoice) // update next best\n    this.setState({\n      computer: move,\n      lastChoice: lastChoice,\n      nextBest: nextBest\n    });\n  }\n  // update Player Score\n  updatePlayerScore = () => {\n    // this.setState((preState) => {\n    //   return {\n    //     playerScore : preState.playerScore + 1\n    //     };\n    //   this.setState((prevState, props) => ({\n    //     playerScore: prevState.playerScore + 1\n    // })); \n\n  }\n  \n\n  // update Computers Score\n  updateComputerScore = (step) => {\n    let  computerScore = this.state.computerScore;\n    this.setState({\n      computerScore: computerScore,\n      });\n  }\n\n  //update next Best\n  updateNextBest = (nextBest) => {\n    this.setState({ nextBest: nextBest});\n  }\n  //selectNextBestMove\n  selectNextBestMove = (lastChoice) => {\n    // const {  lastChoice } = this.state;\n\n    switch(lastChoice) {\n      case 'rock':\n        this.updateNextBest(\"paper\")\n        return 'paper';\n      case 'paper':\n        this.updateNextBest(\"scissors\")\n        return 'scissors';\n      case 'scissors':\n        this.updateNextBest(\"rock\")\n        return 'rock';\n      default:\n        return moves[Math.floor(Math.random() * moves.length)];\n    }\n  };\n  render() {\n    const { player, computer, winner, final,  playerScore, computerScore } = this.state;\n    return (\n      <>\n        <h1 style={{ textAlign: \"center\" }}>Rock Paper Scissors</h1>\n        <div>Select Computer type and Round to Begin</div>\n        <div class=\"gamesetting\">\n        <button\n            className=\"moveBtn\"\n            onClick={() => this.selectType(\"random\")}\n          >\n            Random\n          </button>\n        <button\n            className=\"moveBtn\"\n            onClick={() => this.selectType(\"tactical\")}\n          >\n            Tactical AI\n          </button>\n          <button\n            className=\"moveBtn\"\n            onClick={() => this.selectMode(\"bestOf3\")}\n          >\n            Best Of 3\n          </button>\n          <button\n            className=\"moveBtn\"\n            onClick={() => this.selectMode(\"bestOf5\")}\n          >\n            Best Of 5\n          </button>\n        \n        </div>\n        <div>\n          <Player move={player} />\n          <Player move={computer} />\n        </div>\n        <div>\n          <button\n            className=\"moveBtn\"\n            onClick={() => this.selectMove(\"rock\")}\n          >\n            rock\n          </button>\n          <button\n            className=\"moveBtn\"\n            onClick={() => this.selectMove(\"paper\")}\n          >\n            paper\n          </button>\n          <button\n            className=\"moveBtn\"\n            onClick={() => this.selectMove(\"scissors\")}\n          >\n            scissor\n          </button>\n        </div>\n        <div className=\"winner\"> {winner ? this.selectWinner() : null}</div>\n        <div className=\"finalWin\"> {this.displayWinner() ?? null}</div>\n        <button type=\"button\" onClick={this.startGame}>\n          Play!\n        </button>\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}